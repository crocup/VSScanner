import requests
import vulners


class VulnerSearch(object):

    def __init__(self, cpe, product=None, vulners_api=None):
        """

        :param cpe:
        :param product:
        :param vulners_api:
        """
        self.cpe = cpe
        self.product = product
        self.vulners_api = vulners_api

    def search_circl(self, status):
        """

        :return:
        """
        global result_data
        if status:
            URL = "http://cve.circl.lu/api/cvefor/" + self.cpe
            r = requests.get(url=URL)
            data = r.json()
            result_data = list()
            if len(data) > 0:
                for ids in data:
                    result_data.append(ids['id'])
                # print(result_data)
        else:
            result_data = []
        return result_data

    def search_vulners(self, status, product_version):
        """

        :param status:
        :param product_version:
        :return:
        """
        vulners_api = vulners.Vulners(api_key=self.vulners_api)
        if status:
            try:
                cpe_results = vulners_api.cpeVulnerabilities(str(self.cpe))
                cpe_exploit_list = cpe_results.get('exploit')
                cpe_vulnerabilities_list = [cpe_results.get(key) for key in cpe_results if
                                            key not in ['info', 'blog', 'bugbounty']]
            except ValueError:
                cpe_vulnerabilities_list = vulners_api.searchExploit(product_version, limit=25)
        else:
            cpe_vulnerabilities_list = vulners_api.searchExploit(product_version, limit=25)
        return cpe_vulnerabilities_list

    def download_data_linux(self, os, version):
        """

        :param os:
        :param version:
        :return:
        """
        vulners_api = vulners.Vulners(api_key=self.vulners_api)
        linux_vulnerabilities_data = vulners_api.distributive(os, version)
        return linux_vulnerabilities_data
