import requests
import vulners


def search_circl(cpe):
    """

    :return:
    """
    try:
        if len(cpe) > 0:
            URL = "http://cve.circl.lu/api/cvefor/" + cpe
            r = requests.get(url=URL)
            data = r.json()
            result_data = list()
            if len(data) > 0:
                for ids in data:
                    result_data.append(ids['id'])
        else:
            result_data = []
    except Exception as e:
        print(e)
        result_data = []
    return result_data


class VulnerabilitySearch(object):

    def __init__(self, vulners_api=None):
        """

        :param vulners_api:
        """
        self.vulners_api = vulners.Vulners(api_key=vulners_api)

    def download_data_linux(self, os, version):
        """

        :param os:
        :param version:
        :return:
        """
        return self.vulners_api.distributive(os, version)

    def search_database(self, product):
        """

        :param product:
        :return:
        """
        return self.vulners_api.search(str(product), limit=10)

    def get_cve(self, cve):
        """

        :param cve:
        :return:
        """
        try:
            if len(cve) > 0:
                result = self.vulners_api.document(str(cve))
            else:
                result = []
        except Exception as e:
            print(e)
            result = []
        return result

    def get_cve_data(self, list_cve):
        """

        :param list_cve: example ["CVE-2017-14174", "CVE-2016-1175"]
        :return:
        """
        try:
            if len(list_cve) > 0:
                result_list = self.vulners_api.documentList(list_cve)
            else:
                result_list = []
        except Exception as e:
            print(e)
            result_list = []
        return result_list

    def get_vulnerabilities_by_software(self, name, version):
        """

        :param name:
        :param version:
        :return:
        """
        try:
            if len(name) > 0 and len(version) > 0:
                results = self.vulners_api.softwareVulnerabilities(str(name), str(version))
                exploit_list = results.get('exploit')
                vulnerabilities_list = [results.get(key) for key in results if key not in ['info', 'blog', 'bugbounty']]
            else:
                vulnerabilities_list = []
        except Exception as e:
            print(e)
            vulnerabilities_list = []
        return vulnerabilities_list

    def get_vulnerabilities_by_cpe(self, cpe):
        """

        :param cpe:
        :return:
        """
        try:
            if len(cpe) > 0:
                cpe_results = self.vulners_api.cpeVulnerabilities(str(cpe))
                cpe_exploit_list = cpe_results.get('exploit')
                cpe_vulnerabilities_list = [cpe_results.get(key) for key in cpe_results if
                                            key not in ['info', 'blog', 'bugbounty']]
            else:
                cpe_vulnerabilities_list = []
        except Exception as e:
            print(e)
            cpe_vulnerabilities_list = []
        return cpe_vulnerabilities_list

    def audit_linux(self, name, version, package):
        """

        :param package:
        :param name:
        :param version:
        :return:
        """
        return self.vulners_api.audit(os=str(name), os_version=str(version), package=package)
